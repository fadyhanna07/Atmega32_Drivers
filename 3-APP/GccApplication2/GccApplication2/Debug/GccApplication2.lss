
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000047e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f27  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f9  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071b  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00002488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d1  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009e1  00000000  00000000  00002d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  8a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enuInit>:
			Loc_enuErrorStatus = DIO_enNotOK;
			break;
		}
	return Loc_enuErrorStatus;

}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	dc c0       	rjmp	.+440    	; 0x24e <DIO_enuInit+0x1bc>
  96:	28 2f       	mov	r18, r24
  98:	27 70       	andi	r18, 0x07	; 7
  9a:	98 2f       	mov	r25, r24
  9c:	96 95       	lsr	r25
  9e:	96 95       	lsr	r25
  a0:	96 95       	lsr	r25
  a2:	91 30       	cpi	r25, 0x01	; 1
  a4:	d9 f1       	breq	.+118    	; 0x11c <DIO_enuInit+0x8a>
  a6:	38 f0       	brcs	.+14     	; 0xb6 <DIO_enuInit+0x24>
  a8:	92 30       	cpi	r25, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_enuInit+0x1c>
  ac:	6a c0       	rjmp	.+212    	; 0x182 <DIO_enuInit+0xf0>
  ae:	93 30       	cpi	r25, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_enuInit+0x22>
  b2:	9a c0       	rjmp	.+308    	; 0x1e8 <DIO_enuInit+0x156>
  b4:	cb c0       	rjmp	.+406    	; 0x24c <DIO_enuInit+0x1ba>
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	fa 01       	movw	r30, r20
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	90 81       	ld	r25, Z
  c6:	91 30       	cpi	r25, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <DIO_enuInit+0x52>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	ba 01       	movw	r22, r20
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_enuInit+0x46>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_enuInit+0x42>
  dc:	9b 01       	movw	r18, r22
  de:	29 2b       	or	r18, r25
  e0:	2a bb       	out	0x1a, r18	; 26
  e2:	b4 c0       	rjmp	.+360    	; 0x24c <DIO_enuInit+0x1ba>
  e4:	91 11       	cpse	r25, r1
  e6:	b2 c0       	rjmp	.+356    	; 0x24c <DIO_enuInit+0x1ba>
  e8:	9a b3       	in	r25, 0x1a	; 26
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	fb 01       	movw	r30, r22
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_enuInit+0x64>
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_enuInit+0x60>
  fa:	9f 01       	movw	r18, r30
  fc:	6e 2f       	mov	r22, r30
  fe:	60 95       	com	r22
 100:	96 23       	and	r25, r22
 102:	9a bb       	out	0x1a, r25	; 26
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	fa 01       	movw	r30, r20
 10a:	e0 5a       	subi	r30, 0xA0	; 160
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	91 11       	cpse	r25, r1
 112:	9c c0       	rjmp	.+312    	; 0x24c <DIO_enuInit+0x1ba>
 114:	9b b3       	in	r25, 0x1b	; 27
 116:	29 2b       	or	r18, r25
 118:	2b bb       	out	0x1b, r18	; 27
 11a:	98 c0       	rjmp	.+304    	; 0x24c <DIO_enuInit+0x1ba>
 11c:	48 2f       	mov	r20, r24
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	fa 01       	movw	r30, r20
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	90 81       	ld	r25, Z
 12c:	91 30       	cpi	r25, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_enuInit+0xb8>
 130:	97 b3       	in	r25, 0x17	; 23
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	ba 01       	movw	r22, r20
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_enuInit+0xac>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_enuInit+0xa8>
 142:	9b 01       	movw	r18, r22
 144:	29 2b       	or	r18, r25
 146:	27 bb       	out	0x17, r18	; 23
 148:	81 c0       	rjmp	.+258    	; 0x24c <DIO_enuInit+0x1ba>
 14a:	91 11       	cpse	r25, r1
 14c:	7f c0       	rjmp	.+254    	; 0x24c <DIO_enuInit+0x1ba>
 14e:	97 b3       	in	r25, 0x17	; 23
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	fb 01       	movw	r30, r22
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_enuInit+0xca>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_enuInit+0xc6>
 160:	9f 01       	movw	r18, r30
 162:	6e 2f       	mov	r22, r30
 164:	60 95       	com	r22
 166:	96 23       	and	r25, r22
 168:	97 bb       	out	0x17, r25	; 23
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	fa 01       	movw	r30, r20
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	91 11       	cpse	r25, r1
 178:	69 c0       	rjmp	.+210    	; 0x24c <DIO_enuInit+0x1ba>
 17a:	98 b3       	in	r25, 0x18	; 24
 17c:	29 2b       	or	r18, r25
 17e:	28 bb       	out	0x18, r18	; 24
 180:	65 c0       	rjmp	.+202    	; 0x24c <DIO_enuInit+0x1ba>
 182:	48 2f       	mov	r20, r24
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	fa 01       	movw	r30, r20
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	e0 5a       	subi	r30, 0xA0	; 160
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	90 81       	ld	r25, Z
 192:	91 30       	cpi	r25, 0x01	; 1
 194:	69 f4       	brne	.+26     	; 0x1b0 <DIO_enuInit+0x11e>
 196:	94 b3       	in	r25, 0x14	; 20
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	ba 01       	movw	r22, r20
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_enuInit+0x112>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	2a 95       	dec	r18
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_enuInit+0x10e>
 1a8:	9b 01       	movw	r18, r22
 1aa:	29 2b       	or	r18, r25
 1ac:	24 bb       	out	0x14, r18	; 20
 1ae:	4e c0       	rjmp	.+156    	; 0x24c <DIO_enuInit+0x1ba>
 1b0:	91 11       	cpse	r25, r1
 1b2:	4c c0       	rjmp	.+152    	; 0x24c <DIO_enuInit+0x1ba>
 1b4:	94 b3       	in	r25, 0x14	; 20
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	fb 01       	movw	r30, r22
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_enuInit+0x130>
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_enuInit+0x12c>
 1c6:	9f 01       	movw	r18, r30
 1c8:	6e 2f       	mov	r22, r30
 1ca:	60 95       	com	r22
 1cc:	96 23       	and	r25, r22
 1ce:	94 bb       	out	0x14, r25	; 20
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	fa 01       	movw	r30, r20
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	91 81       	ldd	r25, Z+1	; 0x01
 1dc:	91 11       	cpse	r25, r1
 1de:	36 c0       	rjmp	.+108    	; 0x24c <DIO_enuInit+0x1ba>
 1e0:	95 b3       	in	r25, 0x15	; 21
 1e2:	29 2b       	or	r18, r25
 1e4:	25 bb       	out	0x15, r18	; 21
 1e6:	32 c0       	rjmp	.+100    	; 0x24c <DIO_enuInit+0x1ba>
 1e8:	48 2f       	mov	r20, r24
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	fa 01       	movw	r30, r20
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e0 5a       	subi	r30, 0xA0	; 160
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	90 81       	ld	r25, Z
 1f8:	91 30       	cpi	r25, 0x01	; 1
 1fa:	69 f4       	brne	.+26     	; 0x216 <DIO_enuInit+0x184>
 1fc:	91 b3       	in	r25, 0x11	; 17
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	ba 01       	movw	r22, r20
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_enuInit+0x178>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	2a 95       	dec	r18
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_enuInit+0x174>
 20e:	9b 01       	movw	r18, r22
 210:	29 2b       	or	r18, r25
 212:	21 bb       	out	0x11, r18	; 17
 214:	1b c0       	rjmp	.+54     	; 0x24c <DIO_enuInit+0x1ba>
 216:	91 11       	cpse	r25, r1
 218:	19 c0       	rjmp	.+50     	; 0x24c <DIO_enuInit+0x1ba>
 21a:	91 b3       	in	r25, 0x11	; 17
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	fb 01       	movw	r30, r22
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_enuInit+0x196>
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	2a 95       	dec	r18
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_enuInit+0x192>
 22c:	9f 01       	movw	r18, r30
 22e:	6e 2f       	mov	r22, r30
 230:	60 95       	com	r22
 232:	96 23       	and	r25, r22
 234:	91 bb       	out	0x11, r25	; 17
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	fa 01       	movw	r30, r20
 23c:	e0 5a       	subi	r30, 0xA0	; 160
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	91 81       	ldd	r25, Z+1	; 0x01
 242:	91 11       	cpse	r25, r1
 244:	03 c0       	rjmp	.+6      	; 0x24c <DIO_enuInit+0x1ba>
 246:	92 b3       	in	r25, 0x12	; 18
 248:	29 2b       	or	r18, r25
 24a:	22 bb       	out	0x12, r18	; 18
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	08 f4       	brcc	.+2      	; 0x254 <DIO_enuInit+0x1c2>
 252:	21 cf       	rjmp	.-446    	; 0x96 <DIO_enuInit+0x4>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret

00000258 <DIO_enuSetPort>:
DIO_tenuErrorStatus DIO_enuSetPort(u8 Cpy_u8PortNumber,u8 Cpy_u8PortValue)
{
	DIO_tenuErrorStatus Loc_enuErrorStatus = DIO_enOK;
	switch(Cpy_u8PortNumber){
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	41 f0       	breq	.+16     	; 0x26c <DIO_enuSetPort+0x14>
 25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_enuSetPort+0x10>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	39 f0       	breq	.+14     	; 0x270 <DIO_enuSetPort+0x18>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	39 f0       	breq	.+14     	; 0x274 <DIO_enuSetPort+0x1c>
 266:	07 c0       	rjmp	.+14     	; 0x276 <DIO_enuSetPort+0x1e>
	case(DIO_PORTA):
		ASSIGN_REG(PORTA,Cpy_u8PortValue);
 268:	6b bb       	out	0x1b, r22	; 27
		break;
 26a:	05 c0       	rjmp	.+10     	; 0x276 <DIO_enuSetPort+0x1e>
	case(DIO_PORTB):
		ASSIGN_REG(PORTB,Cpy_u8PortValue);
 26c:	68 bb       	out	0x18, r22	; 24
		break;
 26e:	03 c0       	rjmp	.+6      	; 0x276 <DIO_enuSetPort+0x1e>
	case(DIO_PORTC):
		ASSIGN_REG(PORTC,Cpy_u8PortValue);
 270:	65 bb       	out	0x15, r22	; 21
		break;
 272:	01 c0       	rjmp	.+2      	; 0x276 <DIO_enuSetPort+0x1e>
	case(DIO_PORTD):
		ASSIGN_REG(PORTD,Cpy_u8PortValue);
 274:	62 bb       	out	0x12, r22	; 18
		break;
	}
	return Loc_enuErrorStatus;
}
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret

0000027a <DIO_enuWritePinVAlue>:
DIO_tenuErrorStatus DIO_enuWritePinVAlue(u8 Cpy_u8Port,u8 Cpy_u8Pin,DIO_tenuPinValue Cpy_u8Value)
{
	DIO_tenuErrorStatus Loc_enuErrorStatus = DIO_enOK;
	switch(Cpy_u8Port){
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	11 f1       	breq	.+68     	; 0x2c2 <DIO_enuWritePinVAlue+0x48>
 27e:	30 f0       	brcs	.+12     	; 0x28c <DIO_enuWritePinVAlue+0x12>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	d1 f1       	breq	.+116    	; 0x2f8 <DIO_enuWritePinVAlue+0x7e>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_enuWritePinVAlue+0x10>
 288:	52 c0       	rjmp	.+164    	; 0x32e <DIO_enuWritePinVAlue+0xb4>
 28a:	6b c0       	rjmp	.+214    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	case(DIO_PORTA):
		if (Cpy_u8Value == DIO_enuHigh)
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	59 f4       	brne	.+22     	; 0x2a6 <DIO_enuWritePinVAlue+0x2c>
	{
		SET_BIT(PORTA,Cpy_u8Pin);
 290:	2b b3       	in	r18, 0x1b	; 27
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_enuWritePinVAlue+0x22>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_enuWritePinVAlue+0x1e>
 2a0:	82 2b       	or	r24, r18
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	5e c0       	rjmp	.+188    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
	else if (Cpy_u8Value == DIO_enuLow)
 2a6:	41 11       	cpse	r20, r1
 2a8:	5c c0       	rjmp	.+184    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	{
		CLR_BIT(PORTA,Cpy_u8Pin);
 2aa:	2b b3       	in	r18, 0x1b	; 27
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_enuWritePinVAlue+0x3c>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_enuWritePinVAlue+0x38>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	8b bb       	out	0x1b, r24	; 27
 2c0:	50 c0       	rjmp	.+160    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
		break;
	case(DIO_PORTB):
		if (Cpy_u8Value == DIO_enuHigh)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <DIO_enuWritePinVAlue+0x62>
	{
		SET_BIT(PORTB,Cpy_u8Pin);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_enuWritePinVAlue+0x58>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_enuWritePinVAlue+0x54>
 2d6:	82 2b       	or	r24, r18
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	43 c0       	rjmp	.+134    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
	else if (Cpy_u8Value == DIO_enuLow)
 2dc:	41 11       	cpse	r20, r1
 2de:	41 c0       	rjmp	.+130    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	{
		CLR_BIT(PORTB,Cpy_u8Pin);
 2e0:	28 b3       	in	r18, 0x18	; 24
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_enuWritePinVAlue+0x72>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_enuWritePinVAlue+0x6e>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	88 bb       	out	0x18, r24	; 24
 2f6:	35 c0       	rjmp	.+106    	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
		break;
	case(DIO_PORTC):
		if (Cpy_u8Value == DIO_enuHigh)
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <DIO_enuWritePinVAlue+0x98>
	{
		SET_BIT(PORTC,Cpy_u8Pin);
 2fc:	25 b3       	in	r18, 0x15	; 21
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_enuWritePinVAlue+0x8e>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_enuWritePinVAlue+0x8a>
 30c:	82 2b       	or	r24, r18
 30e:	85 bb       	out	0x15, r24	; 21
 310:	28 c0       	rjmp	.+80     	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
	else if (Cpy_u8Value == DIO_enuLow)
 312:	41 11       	cpse	r20, r1
 314:	26 c0       	rjmp	.+76     	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	{
		CLR_BIT(PORTC,Cpy_u8Pin);
 316:	25 b3       	in	r18, 0x15	; 21
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_enuWritePinVAlue+0xa8>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_enuWritePinVAlue+0xa4>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	85 bb       	out	0x15, r24	; 21
 32c:	1a c0       	rjmp	.+52     	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
		break;
	case(DIO_PORTD):
		if (Cpy_u8Value == DIO_enuHigh)
 32e:	41 30       	cpi	r20, 0x01	; 1
 330:	59 f4       	brne	.+22     	; 0x348 <DIO_enuWritePinVAlue+0xce>
	{
		SET_BIT(PORTD,Cpy_u8Pin);
 332:	22 b3       	in	r18, 0x12	; 18
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_enuWritePinVAlue+0xc4>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_enuWritePinVAlue+0xc0>
 342:	82 2b       	or	r24, r18
 344:	82 bb       	out	0x12, r24	; 18
 346:	0d c0       	rjmp	.+26     	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	}
	else if (Cpy_u8Value == DIO_enuLow)
 348:	41 11       	cpse	r20, r1
 34a:	0b c0       	rjmp	.+22     	; 0x362 <DIO_enuWritePinVAlue+0xe8>
	{
		CLR_BIT(PORTD,Cpy_u8Pin);
 34c:	22 b3       	in	r18, 0x12	; 18
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_enuWritePinVAlue+0xde>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_enuWritePinVAlue+0xda>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	82 bb       	out	0x12, r24	; 18
		break;
	}
	
	return Loc_enuErrorStatus;
	
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret

00000366 <LCD_enuSendCommand>:
        temp_command = pos_y + 0x40;
    }
    else{ Loc_enuErrorStatus = LCD_enuNOTOK;}
    LCD_enuSendCommand(temp_command + 128);
     return Loc_enuErrorStatus;
}
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	d8 2f       	mov	r29, r24
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 380:	c0 e0       	ldi	r28, 0x00	; 0
 382:	0e c0       	rjmp	.+28     	; 0x3a0 <LCD_enuSendCommand+0x3a>
 384:	4d 2f       	mov	r20, r29
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	0c 2e       	mov	r0, r28
 38a:	02 c0       	rjmp	.+4      	; 0x390 <LCD_enuSendCommand+0x2a>
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <LCD_enuSendCommand+0x26>
 394:	41 70       	andi	r20, 0x01	; 1
 396:	6c 2f       	mov	r22, r28
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 39e:	cf 5f       	subi	r28, 0xFF	; 255
 3a0:	c8 30       	cpi	r28, 0x08	; 8
 3a2:	80 f3       	brcs	.-32     	; 0x384 <LCD_enuSendCommand+0x1e>
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_enuSendCommand+0x4c>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_enuSendCommand+0x52>
 3b8:	00 00       	nop
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <LCD_enuWriteData>:
 3cc:	cf 93       	push	r28
 3ce:	c8 2f       	mov	r28, r24
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 3e4:	6c 2f       	mov	r22, r28
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 2c 01 	call	0x258	; 0x258 <DIO_enuSetPort>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	62 e0       	ldi	r22, 0x02	; 2
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 3f6:	8f e9       	ldi	r24, 0x9F	; 159
 3f8:	9f e0       	ldi	r25, 0x0F	; 15
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_enuWriteData+0x2e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_enuWritePinVAlue>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_enuInit>:
 412:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enuInit>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	89 ef       	ldi	r24, 0xF9	; 249
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <LCD_enuInit+0xa>
 424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_enuInit+0x14>
 426:	00 00       	nop
 428:	88 e3       	ldi	r24, 0x38	; 56
 42a:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_enuSendCommand>
 42e:	8c e0       	ldi	r24, 0x0C	; 12
 430:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_enuSendCommand>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_enuSendCommand>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret

0000043e <LCD_enuWriteString>:
    }
    else{}
}*/
/*****************************************************************************/
LCD_tenuErrorStatus LCD_enuWriteString(char * str )
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
	 LCD_tenuErrorStatus Loc_enuErrorStatus = LCD_enuOK;
    if(str != NULL)
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	29 f4       	brne	.+10     	; 0x452 <LCD_enuWriteString+0x14>
 448:	0c c0       	rjmp	.+24     	; 0x462 <LCD_enuWriteString+0x24>
    {
        u8 idx=0;
        while (str[idx] != '\0')
        {
            LCD_enuWriteData(str[idx]);
 44a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_enuWriteData>
            idx++;
 44e:	cf 5f       	subi	r28, 0xFF	; 255
 450:	02 c0       	rjmp	.+4      	; 0x456 <LCD_enuWriteString+0x18>
 452:	8c 01       	movw	r16, r24
 454:	c0 e0       	ldi	r28, 0x00	; 0
{
	 LCD_tenuErrorStatus Loc_enuErrorStatus = LCD_enuOK;
    if(str != NULL)
    {
        u8 idx=0;
        while (str[idx] != '\0')
 456:	f8 01       	movw	r30, r16
 458:	ec 0f       	add	r30, r28
 45a:	f1 1d       	adc	r31, r1
 45c:	80 81       	ld	r24, Z
 45e:	81 11       	cpse	r24, r1
 460:	f4 cf       	rjmp	.-24     	; 0x44a <LCD_enuWriteString+0xc>
            idx++;
        }
        
    }
	return Loc_enuErrorStatus;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <main>:
#include "LCD_int.h"

int main(void)
{
	
    LCD_enuInit();
 46c:	0e 94 09 02 	call	0x412	; 0x412 <LCD_enuInit>
	LCD_enuWriteString("fady");
 470:	80 ea       	ldi	r24, 0xA0	; 160
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_enuWriteString>
 478:	ff cf       	rjmp	.-2      	; 0x478 <main+0xc>

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
