
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc9  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c9  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000632  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000029e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
  84:	6c 2f       	mov	r22, r28
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	83 ef       	ldi	r24, 0xF3	; 243
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <CLCD_voidSendCommand+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <CLCD_voidSendCommand+0x34>
  a0:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>

	/*Set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>

	/*Set Data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
  c8:	6c 2f       	mov	r22, r28
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <CLCD_voidSendData+0x2e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <CLCD_voidSendData+0x34>
  e4:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	62 e0       	ldi	r22, 0x02	; 2
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8SetPinValue>
}
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <CLCD_voidInit>:
  f4:	8f e0       	ldi	r24, 0x0F	; 15
  f6:	97 e2       	ldi	r25, 0x27	; 39
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <CLCD_voidInit+0x4>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <CLCD_voidInit+0xa>
  fe:	00 00       	nop
{
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 36 00 	call	0x6c	; 0x6c <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	0e 94 36 00 	call	0x6c	; 0x6c <CLCD_voidSendCommand>

	/*Clear display*/
	CLCD_voidSendCommand(1);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 36 00 	call	0x6c	; 0x6c <CLCD_voidSendCommand>
 112:	08 95       	ret

00000114 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 114:	68 30       	cpi	r22, 0x08	; 8
 116:	08 f0       	brcs	.+2      	; 0x11a <DIO_u8SetPinDirection+0x6>
 118:	78 c0       	rjmp	.+240    	; 0x20a <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
 11a:	41 11       	cpse	r20, r1
 11c:	3c c0       	rjmp	.+120    	; 0x196 <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	99 f0       	breq	.+38     	; 0x148 <DIO_u8SetPinDirection+0x34>
 122:	28 f0       	brcs	.+10     	; 0x12e <DIO_u8SetPinDirection+0x1a>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	e9 f0       	breq	.+58     	; 0x162 <DIO_u8SetPinDirection+0x4e>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	41 f1       	breq	.+80     	; 0x17c <DIO_u8SetPinDirection+0x68>
 12c:	70 c0       	rjmp	.+224    	; 0x20e <DIO_u8SetPinDirection+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_u8SetPinDirection+0x26>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_u8SetPinDirection+0x22>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 144:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 146:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinDirection+0x40>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinDirection+0x3c>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 15e:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 160:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_u8SetPinDirection+0x5a>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_u8SetPinDirection+0x56>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 178:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 17a:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_u8SetPinDirection+0x74>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_u8SetPinDirection+0x70>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 192:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 194:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	e1 f5       	brne	.+120    	; 0x212 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 f0       	breq	.+36     	; 0x1c2 <DIO_u8SetPinDirection+0xae>
 19e:	28 f0       	brcs	.+10     	; 0x1aa <DIO_u8SetPinDirection+0x96>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	d9 f0       	breq	.+54     	; 0x1da <DIO_u8SetPinDirection+0xc6>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	29 f1       	breq	.+74     	; 0x1f2 <DIO_u8SetPinDirection+0xde>
 1a8:	36 c0       	rjmp	.+108    	; 0x216 <DIO_u8SetPinDirection+0x102>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 1aa:	2a b3       	in	r18, 0x1a	; 26
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_u8SetPinDirection+0xa2>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_u8SetPinDirection+0x9e>
 1ba:	82 2b       	or	r24, r18
 1bc:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 1c0:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 1c2:	27 b3       	in	r18, 0x17	; 23
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_u8SetPinDirection+0xba>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_u8SetPinDirection+0xb6>
 1d2:	82 2b       	or	r24, r18
 1d4:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 1d8:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8SetPinDirection+0xd2>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8SetPinDirection+0xce>
 1ea:	82 2b       	or	r24, r18
 1ec:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 1f0:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 1f2:	21 b3       	in	r18, 0x11	; 17
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_u8SetPinDirection+0xea>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_u8SetPinDirection+0xe6>
 202:	82 2b       	or	r24, r18
 204:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 206:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 208:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 216:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 218:	08 95       	ret

0000021a <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	49 f0       	breq	.+18     	; 0x230 <DIO_u8SetPortDirection+0x16>
 21e:	28 f0       	brcs	.+10     	; 0x22a <DIO_u8SetPortDirection+0x10>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	49 f0       	breq	.+18     	; 0x236 <DIO_u8SetPortDirection+0x1c>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	51 f0       	breq	.+20     	; 0x23c <DIO_u8SetPortDirection+0x22>
 228:	0c c0       	rjmp	.+24     	; 0x242 <DIO_u8SetPortDirection+0x28>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 22a:	6a bb       	out	0x1a, r22	; 26
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 22c:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 22e:	08 95       	ret
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 230:	67 bb       	out	0x17, r22	; 23
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 232:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 234:	08 95       	ret
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 236:	64 bb       	out	0x14, r22	; 20
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 238:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 23a:	08 95       	ret
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 23c:	61 bb       	out	0x11, r22	; 17
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 23e:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 240:	08 95       	ret
	default: Local_u8ErrorState=1;
 242:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 244:	08 95       	ret

00000246 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 246:	68 30       	cpi	r22, 0x08	; 8
 248:	08 f0       	brcs	.+2      	; 0x24c <DIO_u8SetPinValue+0x6>
 24a:	78 c0       	rjmp	.+240    	; 0x33c <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 24c:	41 11       	cpse	r20, r1
 24e:	3c c0       	rjmp	.+120    	; 0x2c8 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	99 f0       	breq	.+38     	; 0x27a <DIO_u8SetPinValue+0x34>
 254:	28 f0       	brcs	.+10     	; 0x260 <DIO_u8SetPinValue+0x1a>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	e9 f0       	breq	.+58     	; 0x294 <DIO_u8SetPinValue+0x4e>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	41 f1       	breq	.+80     	; 0x2ae <DIO_u8SetPinValue+0x68>
 25e:	70 c0       	rjmp	.+224    	; 0x340 <DIO_u8SetPinValue+0xfa>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 260:	2b b3       	in	r18, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8SetPinValue+0x26>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8SetPinValue+0x22>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 276:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 278:	08 95       	ret
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 27a:	28 b3       	in	r18, 0x18	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinValue+0x40>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPinValue+0x3c>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 290:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 292:	08 95       	ret
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8SetPinValue+0x5a>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8SetPinValue+0x56>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 2ac:	08 95       	ret
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8SetPinValue+0x74>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8SetPinValue+0x70>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 2c6:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	e1 f5       	brne	.+120    	; 0x344 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	91 f0       	breq	.+36     	; 0x2f4 <DIO_u8SetPinValue+0xae>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <DIO_u8SetPinValue+0x96>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	d9 f0       	breq	.+54     	; 0x30c <DIO_u8SetPinValue+0xc6>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	29 f1       	breq	.+74     	; 0x324 <DIO_u8SetPinValue+0xde>
 2da:	36 c0       	rjmp	.+108    	; 0x348 <DIO_u8SetPinValue+0x102>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 2dc:	2b b3       	in	r18, 0x1b	; 27
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_u8SetPinValue+0xa2>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_u8SetPinValue+0x9e>
 2ec:	82 2b       	or	r24, r18
 2ee:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 2f2:	08 95       	ret
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 2f4:	28 b3       	in	r18, 0x18	; 24
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8SetPinValue+0xba>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8SetPinValue+0xb6>
 304:	82 2b       	or	r24, r18
 306:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 308:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 30a:	08 95       	ret
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 30c:	25 b3       	in	r18, 0x15	; 21
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_u8SetPinValue+0xd2>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_u8SetPinValue+0xce>
 31c:	82 2b       	or	r24, r18
 31e:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 320:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 322:	08 95       	ret
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_u8SetPinValue+0xea>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_u8SetPinValue+0xe6>
 334:	82 2b       	or	r24, r18
 336:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 338:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 33a:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	08 95       	ret
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
			default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
			default: Local_u8ErrorState=1; break;
 348:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 34a:	08 95       	ret

0000034c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	49 f0       	breq	.+18     	; 0x362 <DIO_u8SetPortValue+0x16>
 350:	28 f0       	brcs	.+10     	; 0x35c <DIO_u8SetPortValue+0x10>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	49 f0       	breq	.+18     	; 0x368 <DIO_u8SetPortValue+0x1c>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	51 f0       	breq	.+20     	; 0x36e <DIO_u8SetPortValue+0x22>
 35a:	0c c0       	rjmp	.+24     	; 0x374 <DIO_u8SetPortValue+0x28>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 35c:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 35e:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 360:	08 95       	ret
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 362:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 364:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 366:	08 95       	ret
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 368:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 36a:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 36c:	08 95       	ret
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 36e:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 370:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 372:	08 95       	ret
	default: Local_u8ErrorState=1;
 374:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 376:	08 95       	ret

00000378 <main>:
#include "DIO_interface.h"

void main(void)
{
	/*Initialize LCD pins direction*/
	DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);
 378:	6f ef       	ldi	r22, 0xFF	; 255
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_u8SetPinDirection>

	CLCD_voidInit();
 39e:	0e 94 7a 00 	call	0xf4	; 0xf4 <CLCD_voidInit>

	CLCD_voidSendData('A');
 3a2:	81 e4       	ldi	r24, 0x41	; 65
 3a4:	0e 94 58 00 	call	0xb0	; 0xb0 <CLCD_voidSendData>
	CLCD_voidSendData('M');
 3a8:	8d e4       	ldi	r24, 0x4D	; 77
 3aa:	0e 94 58 00 	call	0xb0	; 0xb0 <CLCD_voidSendData>
	CLCD_voidSendData('G');
 3ae:	87 e4       	ldi	r24, 0x47	; 71
 3b0:	0e 94 58 00 	call	0xb0	; 0xb0 <CLCD_voidSendData>
	CLCD_voidSendData('A');
 3b4:	81 e4       	ldi	r24, 0x41	; 65
 3b6:	0e 94 58 00 	call	0xb0	; 0xb0 <CLCD_voidSendData>
	CLCD_voidSendData('D');
 3ba:	84 e4       	ldi	r24, 0x44	; 68
 3bc:	0e 94 58 00 	call	0xb0	; 0xb0 <CLCD_voidSendData>
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <main+0x48>

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
