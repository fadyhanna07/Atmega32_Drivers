
SPI_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000029c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9e  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000574  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000686  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d8  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 24 01 	call	0x248	; 0x248 <main>
  7a:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
    DIO_tenuErrorStatus Loc_enuErrorStatus = DIO_enOK;
    u8 Loc_u8Counter = 0;
    u8 Loc_u8PinNumber = 0;
    u8 Loc_u8PortNumber = 0;

    for(Loc_u8Counter = 0; Loc_u8Counter < DIO_u8NumberOfPins; Loc_u8Counter++){
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	dc c0       	rjmp	.+440    	; 0x23e <DIO_enuInit+0x1bc>
        Loc_u8PinNumber = Loc_u8Counter  % 8;
  86:	28 2f       	mov	r18, r24
  88:	27 70       	andi	r18, 0x07	; 7
        Loc_u8PortNumber = Loc_u8Counter / 8;
  8a:	98 2f       	mov	r25, r24
  8c:	96 95       	lsr	r25
  8e:	96 95       	lsr	r25
  90:	96 95       	lsr	r25

        switch (Loc_u8PortNumber)
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	d9 f1       	breq	.+118    	; 0x10c <DIO_enuInit+0x8a>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_enuInit+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_enuInit+0x1c>
  9c:	6a c0       	rjmp	.+212    	; 0x172 <DIO_enuInit+0xf0>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_enuInit+0x22>
  a2:	9a c0       	rjmp	.+308    	; 0x1d8 <DIO_enuInit+0x156>
  a4:	cb c0       	rjmp	.+406    	; 0x23c <DIO_enuInit+0x1ba>
        {
        case (DIO_PORTA):

            if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_OUTPUT){
  a6:	48 2f       	mov	r20, r24
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	fa 01       	movw	r30, r20
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 5a       	subi	r30, 0xA0	; 160
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	90 81       	ld	r25, Z
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <DIO_enuInit+0x52>
            	SET_BIT(DDRA, Loc_u8PinNumber);
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	ba 01       	movw	r22, r20
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enuInit+0x46>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enuInit+0x42>
  cc:	9b 01       	movw	r18, r22
  ce:	29 2b       	or	r18, r25
  d0:	2a bb       	out	0x1a, r18	; 26
  d2:	b4 c0       	rjmp	.+360    	; 0x23c <DIO_enuInit+0x1ba>
            }

            else if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_INPUT){
  d4:	91 11       	cpse	r25, r1
  d6:	b2 c0       	rjmp	.+356    	; 0x23c <DIO_enuInit+0x1ba>
                CLR_BIT(DDRA, Loc_u8PinNumber);
  d8:	9a b3       	in	r25, 0x1a	; 26
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	fb 01       	movw	r30, r22
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_enuInit+0x64>
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	2a 95       	dec	r18
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_enuInit+0x60>
  ea:	9f 01       	movw	r18, r30
  ec:	6e 2f       	mov	r22, r30
  ee:	60 95       	com	r22
  f0:	96 23       	and	r25, r22
  f2:	9a bb       	out	0x1a, r25	; 26
                  if(DIO_strPinCfg[Loc_u8Counter].DIO_InputStatus == DIO_INPUT_PULL_UP){
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	fa 01       	movw	r30, r20
  fa:	e0 5a       	subi	r30, 0xA0	; 160
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	91 11       	cpse	r25, r1
 102:	9c c0       	rjmp	.+312    	; 0x23c <DIO_enuInit+0x1ba>
                    SET_BIT(PORTA, Loc_u8PinNumber);
 104:	9b b3       	in	r25, 0x1b	; 27
 106:	29 2b       	or	r18, r25
 108:	2b bb       	out	0x1b, r18	; 27
 10a:	98 c0       	rjmp	.+304    	; 0x23c <DIO_enuInit+0x1ba>
                  }
            }
            break;

        case (DIO_PORTB):
        if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_OUTPUT){
 10c:	48 2f       	mov	r20, r24
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	fa 01       	movw	r30, r20
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	90 81       	ld	r25, Z
 11c:	91 30       	cpi	r25, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_enuInit+0xb8>
                SET_BIT(DDRB, Loc_u8PinNumber);
 120:	97 b3       	in	r25, 0x17	; 23
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	ba 01       	movw	r22, r20
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_enuInit+0xac>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	2a 95       	dec	r18
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_enuInit+0xa8>
 132:	9b 01       	movw	r18, r22
 134:	29 2b       	or	r18, r25
 136:	27 bb       	out	0x17, r18	; 23
 138:	81 c0       	rjmp	.+258    	; 0x23c <DIO_enuInit+0x1ba>
            }

            else if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_INPUT){
 13a:	91 11       	cpse	r25, r1
 13c:	7f c0       	rjmp	.+254    	; 0x23c <DIO_enuInit+0x1ba>
                CLR_BIT(DDRB, Loc_u8PinNumber);
 13e:	97 b3       	in	r25, 0x17	; 23
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	fb 01       	movw	r30, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enuInit+0xca>
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	2a 95       	dec	r18
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enuInit+0xc6>
 150:	9f 01       	movw	r18, r30
 152:	6e 2f       	mov	r22, r30
 154:	60 95       	com	r22
 156:	96 23       	and	r25, r22
 158:	97 bb       	out	0x17, r25	; 23
                  if(DIO_strPinCfg[Loc_u8Counter].DIO_InputStatus == DIO_INPUT_PULL_UP){
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	fa 01       	movw	r30, r20
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	91 11       	cpse	r25, r1
 168:	69 c0       	rjmp	.+210    	; 0x23c <DIO_enuInit+0x1ba>
                    SET_BIT(PORTB, Loc_u8PinNumber);
 16a:	98 b3       	in	r25, 0x18	; 24
 16c:	29 2b       	or	r18, r25
 16e:	28 bb       	out	0x18, r18	; 24
 170:	65 c0       	rjmp	.+202    	; 0x23c <DIO_enuInit+0x1ba>
                  }
            }
            break;

        case (DIO_PORTC):
            if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_OUTPUT){
 172:	48 2f       	mov	r20, r24
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	fa 01       	movw	r30, r20
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	90 81       	ld	r25, Z
 182:	91 30       	cpi	r25, 0x01	; 1
 184:	69 f4       	brne	.+26     	; 0x1a0 <DIO_enuInit+0x11e>
                SET_BIT(DDRC, Loc_u8PinNumber);
 186:	94 b3       	in	r25, 0x14	; 20
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	ba 01       	movw	r22, r20
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_enuInit+0x112>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	2a 95       	dec	r18
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_enuInit+0x10e>
 198:	9b 01       	movw	r18, r22
 19a:	29 2b       	or	r18, r25
 19c:	24 bb       	out	0x14, r18	; 20
 19e:	4e c0       	rjmp	.+156    	; 0x23c <DIO_enuInit+0x1ba>
            }

            else if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_INPUT){
 1a0:	91 11       	cpse	r25, r1
 1a2:	4c c0       	rjmp	.+152    	; 0x23c <DIO_enuInit+0x1ba>
                CLR_BIT(DDRC, Loc_u8PinNumber);
 1a4:	94 b3       	in	r25, 0x14	; 20
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	fb 01       	movw	r30, r22
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_enuInit+0x130>
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	2a 95       	dec	r18
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_enuInit+0x12c>
 1b6:	9f 01       	movw	r18, r30
 1b8:	6e 2f       	mov	r22, r30
 1ba:	60 95       	com	r22
 1bc:	96 23       	and	r25, r22
 1be:	94 bb       	out	0x14, r25	; 20
                  if(DIO_strPinCfg[Loc_u8Counter].DIO_InputStatus == DIO_INPUT_PULL_UP){
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	fa 01       	movw	r30, r20
 1c6:	e0 5a       	subi	r30, 0xA0	; 160
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	91 11       	cpse	r25, r1
 1ce:	36 c0       	rjmp	.+108    	; 0x23c <DIO_enuInit+0x1ba>
                    SET_BIT(PORTC, Loc_u8PinNumber);
 1d0:	95 b3       	in	r25, 0x15	; 21
 1d2:	29 2b       	or	r18, r25
 1d4:	25 bb       	out	0x15, r18	; 21
 1d6:	32 c0       	rjmp	.+100    	; 0x23c <DIO_enuInit+0x1ba>
                  }
            }
            break;
        case (DIO_PORTD):
        if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_OUTPUT){
 1d8:	48 2f       	mov	r20, r24
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	fa 01       	movw	r30, r20
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e0 5a       	subi	r30, 0xA0	; 160
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	90 81       	ld	r25, Z
 1e8:	91 30       	cpi	r25, 0x01	; 1
 1ea:	69 f4       	brne	.+26     	; 0x206 <DIO_enuInit+0x184>
                SET_BIT(DDRD, Loc_u8PinNumber);
 1ec:	91 b3       	in	r25, 0x11	; 17
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	ba 01       	movw	r22, r20
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enuInit+0x178>
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	2a 95       	dec	r18
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_enuInit+0x174>
 1fe:	9b 01       	movw	r18, r22
 200:	29 2b       	or	r18, r25
 202:	21 bb       	out	0x11, r18	; 17
 204:	1b c0       	rjmp	.+54     	; 0x23c <DIO_enuInit+0x1ba>
            }

            else if(DIO_strPinCfg[Loc_u8Counter].DIO_PinDirection == DIO_DIR_INPUT){
 206:	91 11       	cpse	r25, r1
 208:	19 c0       	rjmp	.+50     	; 0x23c <DIO_enuInit+0x1ba>
                CLR_BIT(DDRD, Loc_u8PinNumber);
 20a:	91 b3       	in	r25, 0x11	; 17
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	fb 01       	movw	r30, r22
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_enuInit+0x196>
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_enuInit+0x192>
 21c:	9f 01       	movw	r18, r30
 21e:	6e 2f       	mov	r22, r30
 220:	60 95       	com	r22
 222:	96 23       	and	r25, r22
 224:	91 bb       	out	0x11, r25	; 17
                  if(DIO_strPinCfg[Loc_u8Counter].DIO_InputStatus == DIO_INPUT_PULL_UP){
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	fa 01       	movw	r30, r20
 22c:	e0 5a       	subi	r30, 0xA0	; 160
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	91 11       	cpse	r25, r1
 234:	03 c0       	rjmp	.+6      	; 0x23c <DIO_enuInit+0x1ba>
                    SET_BIT(PORTD, Loc_u8PinNumber);
 236:	92 b3       	in	r25, 0x12	; 18
 238:	29 2b       	or	r18, r25
 23a:	22 bb       	out	0x12, r18	; 18
    DIO_tenuErrorStatus Loc_enuErrorStatus = DIO_enOK;
    u8 Loc_u8Counter = 0;
    u8 Loc_u8PinNumber = 0;
    u8 Loc_u8PortNumber = 0;

    for(Loc_u8Counter = 0; Loc_u8Counter < DIO_u8NumberOfPins; Loc_u8Counter++){
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 32       	cpi	r24, 0x20	; 32
 240:	08 f4       	brcc	.+2      	; 0x244 <DIO_enuInit+0x1c2>
 242:	21 cf       	rjmp	.-446    	; 0x86 <DIO_enuInit+0x4>




    return Loc_enuErrorStatus;
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <main>:
int main(void)
{
    /* Replace with your application code */
	
    
		DIO_enuInit();
 248:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
		SPI_voidInit();
 24c:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_voidInit>
		while(1){
		 SPI_u8SendRecieveByte(5);
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	0e 94 48 01 	call	0x290	; 0x290 <SPI_u8SendRecieveByte>
 256:	fc cf       	rjmp	.-8      	; 0x250 <main+0x8>

00000258 <SPI_voidInit>:

void SPI_voidInit(void)
{
    //configure SPI mode 
    #if(SPI_Mode == SPI_Mode_MASTER)
        SET_BIT(SPCR,SPCR_MSTR);
 258:	8d b1       	in	r24, 0x0d	; 13
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	8d b9       	out	0x0d, r24	; 13
    #elif (SPI_Mode == SPI_Mode_SLAVE)
        CLR_BIT(SPCR,SPCR_MSTR);
    #endif
    //configure interrupt 
    #if(SPI_Interrupt == SPI_INT_ENABLE)
        SET_BIT(SPCR,SPCR_SPIE);
 25e:	8d b1       	in	r24, 0x0d	; 13
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8d b9       	out	0x0d, r24	; 13
    #endif
    // Config For SPI Data order  
    #if(SPI_DataOrder == SPI_DataOrder_LSB)
        SET_BIT(SPCR,SPCR_DORD);
    #elif (SPI_DataOrder == SPI_DataOrder_MSB)
        CLR_BIT(SPCR,SPCR_DORD);
 264:	8d b1       	in	r24, 0x0d	; 13
 266:	8f 7d       	andi	r24, 0xDF	; 223
 268:	8d b9       	out	0x0d, r24	; 13
    #endif
    // Config For SPI CLK Polarity 
    #if(SPI_CLKPolarity == SPI_RAISING_EDGE)
        SET_BIT(SPCR,SPCR_CPOL);
 26a:	8d b1       	in	r24, 0x0d	; 13
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	8d b9       	out	0x0d, r24	; 13
    #endif
    // Config For SPI CLK PHASE 
    #if(SPI_CLKPHASE == SPI_SETUP)
        SET_BIT(SPCR,SPCR_CPHA);
    #elif(SPI_CLKPHASE == SPI_SAMPLE)
        CLR_BIT(SPCR,SPCR_CPHA);
 270:	8d b1       	in	r24, 0x0d	; 13
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	8d b9       	out	0x0d, r24	; 13
    #if(SPI_MasterCLK == SPI_CLK_OVER_4)
        CLR_BIT(SPCR,SPCR_SPR0);
        CLR_BIT(SPCR,SPCR_SPR1);
        CLR_BIT(SPSR,SPSR_SPI2X);
    #elif(SPI_MasterCLK == SPI_CLK_OVER_16)
        SET_BIT(SPCR,SPCR_SPR0);
 276:	8d b1       	in	r24, 0x0d	; 13
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	8d b9       	out	0x0d, r24	; 13
        CLR_BIT(SPCR,SPCR_SPR1);
 27c:	8d b1       	in	r24, 0x0d	; 13
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	8d b9       	out	0x0d, r24	; 13
        CLR_BIT(SPSR,SPSR_SPI2X);
 282:	8e b1       	in	r24, 0x0e	; 14
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	8e b9       	out	0x0e, r24	; 14
        SET_BIT(SPCR,SPCR_SPR0);
        SET_BIT(SPCR,SPCR_SPR1);
        SET_BIT(SPSR,SPSR_SPI2X); 
    #endif
    // ENABLE SPI 
    SET_BIT(SPCR,SPCR_SPE);
 288:	8d b1       	in	r24, 0x0d	; 13
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	8d b9       	out	0x0d, r24	; 13
 28e:	08 95       	ret

00000290 <SPI_u8SendRecieveByte>:
}
u8 SPI_u8SendRecieveByte(u8 Copy_u8Data)
{
    SPDR = Copy_u8Data;
 290:	8f b9       	out	0x0f, r24	; 15
    // wait until trasfer complete (busy wait)
    while(GET_BIT(SPSR,SPSR_SPIF) == 0);
 292:	8e b1       	in	r24, 0x0e	; 14
    return SPDR;
 294:	8f b1       	in	r24, 0x0f	; 15
}
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
