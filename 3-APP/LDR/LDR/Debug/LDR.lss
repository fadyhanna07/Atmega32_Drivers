
LDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1a  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068d  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ef  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c7  00000000  00000000  00002adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  8a:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidConfigureVoltageReference>:
{
    ADCSRA = (ADCSRA & ADC_InterruptControl_clear) | InterruptControl;
}
void ADC_voidSetCallback(void (*pf)(void))
{
    ADC_CallBack = (void (*)(void))pf;
  92:	97 b1       	in	r25, 0x07	; 7
  94:	9f 73       	andi	r25, 0x3F	; 63
  96:	89 2b       	or	r24, r25
  98:	87 b9       	out	0x07, r24	; 7
  9a:	08 95       	ret

0000009c <ADC_voidConfigureInputChannel>:
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	90 7e       	andi	r25, 0xE0	; 224
  a0:	89 2b       	or	r24, r25
  a2:	87 b9       	out	0x07, r24	; 7
  a4:	08 95       	ret

000000a6 <ADC_voidConfigureClockPrescaler>:
  a6:	96 b1       	in	r25, 0x06	; 6
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	89 2b       	or	r24, r25
  ac:	86 b9       	out	0x06, r24	; 6
  ae:	08 95       	ret

000000b0 <ADC_voidControlADC>:
  b0:	96 b1       	in	r25, 0x06	; 6
  b2:	9f 77       	andi	r25, 0x7F	; 127
  b4:	89 2b       	or	r24, r25
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_enuStartConversionAndWait>:
  ba:	61 15       	cp	r22, r1
  bc:	71 05       	cpc	r23, r1
  be:	31 f1       	breq	.+76     	; 0x10c <ADC_enuStartConversionAndWait+0x52>
  c0:	96 b1       	in	r25, 0x06	; 6
  c2:	90 64       	ori	r25, 0x40	; 64
  c4:	96 b9       	out	0x06, r25	; 6
  c6:	96 b1       	in	r25, 0x06	; 6
  c8:	81 11       	cpse	r24, r1
  ca:	09 c0       	rjmp	.+18     	; 0xde <ADC_enuStartConversionAndWait+0x24>
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	87 b9       	out	0x07, r24	; 7
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fb 01       	movw	r30, r22
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
  dc:	12 c0       	rjmp	.+36     	; 0x102 <ADC_enuStartConversionAndWait+0x48>
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	87 b9       	out	0x07, r24	; 7
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	fb 01       	movw	r30, r22
  ec:	31 83       	std	Z+1, r19	; 0x01
  ee:	20 83       	st	Z, r18
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	89 2f       	mov	r24, r25
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	98 2f       	mov	r25, r24
  f8:	88 27       	eor	r24, r24
  fa:	82 2b       	or	r24, r18
  fc:	93 2b       	or	r25, r19
  fe:	91 83       	std	Z+1, r25	; 0x01
 100:	80 83       	st	Z, r24
 102:	86 b1       	in	r24, 0x06	; 6
 104:	80 61       	ori	r24, 0x10	; 16
 106:	86 b9       	out	0x06, r24	; 6
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <__vector_16>:
}
void __vector_16(void)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
    ADC_CallBack();
 132:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <__data_end>
 136:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <__data_end+0x1>
 13a:	09 95       	icall
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <ADC_voidInit>:
void ADC_voidInit(void)
{
    /* Select the Voltage reference from config file */
    ADC_voidConfigureVoltageReference(ADC_VoltageReference_CFG);
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidConfigureVoltageReference>
   /*Select The Prescaler value  from config file*/ 
    ADC_voidConfigureClockPrescaler(ADC_ClockPrescaler_CFG);
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_voidConfigureClockPrescaler>
    /* enable the ADC */
    ADC_voidControlADC(ADC_Enable);
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_voidControlADC>
 170:	08 95       	ret

00000172 <DIO_enuInit>:
			Loc_enuErrorStatus = DIO_enNotOK;
			break;
		}
	return Loc_enuErrorStatus;

}
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	ed c0       	rjmp	.+474    	; 0x350 <DIO_enuInit+0x1de>
 176:	28 2f       	mov	r18, r24
 178:	27 70       	andi	r18, 0x07	; 7
 17a:	98 2f       	mov	r25, r24
 17c:	96 95       	lsr	r25
 17e:	96 95       	lsr	r25
 180:	96 95       	lsr	r25
 182:	91 30       	cpi	r25, 0x01	; 1
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_enuInit+0x16>
 186:	3f c0       	rjmp	.+126    	; 0x206 <DIO_enuInit+0x94>
 188:	38 f0       	brcs	.+14     	; 0x198 <DIO_enuInit+0x26>
 18a:	92 30       	cpi	r25, 0x02	; 2
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_enuInit+0x1e>
 18e:	72 c0       	rjmp	.+228    	; 0x274 <DIO_enuInit+0x102>
 190:	93 30       	cpi	r25, 0x03	; 3
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_enuInit+0x24>
 194:	a6 c0       	rjmp	.+332    	; 0x2e2 <DIO_enuInit+0x170>
 196:	db c0       	rjmp	.+438    	; 0x34e <DIO_enuInit+0x1dc>
 198:	48 2f       	mov	r20, r24
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	fa 01       	movw	r30, r20
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e0 5a       	subi	r30, 0xA0	; 160
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	90 81       	ld	r25, Z
 1a8:	91 30       	cpi	r25, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <DIO_enuInit+0x54>
 1ac:	9a b3       	in	r25, 0x1a	; 26
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	ba 01       	movw	r22, r20
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_enuInit+0x48>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_enuInit+0x44>
 1be:	9b 01       	movw	r18, r22
 1c0:	29 2b       	or	r18, r25
 1c2:	2a bb       	out	0x1a, r18	; 26
 1c4:	c4 c0       	rjmp	.+392    	; 0x34e <DIO_enuInit+0x1dc>
 1c6:	91 11       	cpse	r25, r1
 1c8:	c2 c0       	rjmp	.+388    	; 0x34e <DIO_enuInit+0x1dc>
 1ca:	9a b3       	in	r25, 0x1a	; 26
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	fb 01       	movw	r30, r22
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_enuInit+0x66>
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	2a 95       	dec	r18
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_enuInit+0x62>
 1dc:	9f 01       	movw	r18, r30
 1de:	6e 2f       	mov	r22, r30
 1e0:	60 95       	com	r22
 1e2:	96 23       	and	r25, r22
 1e4:	9a bb       	out	0x1a, r25	; 26
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	fa 01       	movw	r30, r20
 1ec:	e0 5a       	subi	r30, 0xA0	; 160
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	91 11       	cpse	r25, r1
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <DIO_enuInit+0x8c>
 1f6:	9b b3       	in	r25, 0x1b	; 27
 1f8:	29 2b       	or	r18, r25
 1fa:	2b bb       	out	0x1b, r18	; 27
 1fc:	a8 c0       	rjmp	.+336    	; 0x34e <DIO_enuInit+0x1dc>
 1fe:	9b b3       	in	r25, 0x1b	; 27
 200:	69 23       	and	r22, r25
 202:	6b bb       	out	0x1b, r22	; 27
 204:	a4 c0       	rjmp	.+328    	; 0x34e <DIO_enuInit+0x1dc>
 206:	48 2f       	mov	r20, r24
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	fa 01       	movw	r30, r20
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	90 81       	ld	r25, Z
 216:	91 30       	cpi	r25, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <DIO_enuInit+0xc2>
 21a:	97 b3       	in	r25, 0x17	; 23
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	ba 01       	movw	r22, r20
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_enuInit+0xb6>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	2a 95       	dec	r18
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_enuInit+0xb2>
 22c:	9b 01       	movw	r18, r22
 22e:	29 2b       	or	r18, r25
 230:	27 bb       	out	0x17, r18	; 23
 232:	8d c0       	rjmp	.+282    	; 0x34e <DIO_enuInit+0x1dc>
 234:	91 11       	cpse	r25, r1
 236:	8b c0       	rjmp	.+278    	; 0x34e <DIO_enuInit+0x1dc>
 238:	97 b3       	in	r25, 0x17	; 23
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	fb 01       	movw	r30, r22
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_enuInit+0xd4>
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	2a 95       	dec	r18
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_enuInit+0xd0>
 24a:	9f 01       	movw	r18, r30
 24c:	6e 2f       	mov	r22, r30
 24e:	60 95       	com	r22
 250:	96 23       	and	r25, r22
 252:	97 bb       	out	0x17, r25	; 23
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	fa 01       	movw	r30, r20
 25a:	e0 5a       	subi	r30, 0xA0	; 160
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	91 11       	cpse	r25, r1
 262:	04 c0       	rjmp	.+8      	; 0x26c <DIO_enuInit+0xfa>
 264:	98 b3       	in	r25, 0x18	; 24
 266:	29 2b       	or	r18, r25
 268:	28 bb       	out	0x18, r18	; 24
 26a:	71 c0       	rjmp	.+226    	; 0x34e <DIO_enuInit+0x1dc>
 26c:	98 b3       	in	r25, 0x18	; 24
 26e:	69 23       	and	r22, r25
 270:	68 bb       	out	0x18, r22	; 24
 272:	6d c0       	rjmp	.+218    	; 0x34e <DIO_enuInit+0x1dc>
 274:	48 2f       	mov	r20, r24
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	fa 01       	movw	r30, r20
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e0 5a       	subi	r30, 0xA0	; 160
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	90 81       	ld	r25, Z
 284:	91 30       	cpi	r25, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <DIO_enuInit+0x130>
 288:	94 b3       	in	r25, 0x14	; 20
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	ba 01       	movw	r22, r20
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_enuInit+0x124>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_enuInit+0x120>
 29a:	9b 01       	movw	r18, r22
 29c:	29 2b       	or	r18, r25
 29e:	24 bb       	out	0x14, r18	; 20
 2a0:	56 c0       	rjmp	.+172    	; 0x34e <DIO_enuInit+0x1dc>
 2a2:	91 11       	cpse	r25, r1
 2a4:	54 c0       	rjmp	.+168    	; 0x34e <DIO_enuInit+0x1dc>
 2a6:	94 b3       	in	r25, 0x14	; 20
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	fb 01       	movw	r30, r22
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_enuInit+0x142>
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_enuInit+0x13e>
 2b8:	9f 01       	movw	r18, r30
 2ba:	6e 2f       	mov	r22, r30
 2bc:	60 95       	com	r22
 2be:	96 23       	and	r25, r22
 2c0:	94 bb       	out	0x14, r25	; 20
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	fa 01       	movw	r30, r20
 2c8:	e0 5a       	subi	r30, 0xA0	; 160
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	91 81       	ldd	r25, Z+1	; 0x01
 2ce:	91 11       	cpse	r25, r1
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <DIO_enuInit+0x168>
 2d2:	95 b3       	in	r25, 0x15	; 21
 2d4:	29 2b       	or	r18, r25
 2d6:	25 bb       	out	0x15, r18	; 21
 2d8:	3a c0       	rjmp	.+116    	; 0x34e <DIO_enuInit+0x1dc>
 2da:	95 b3       	in	r25, 0x15	; 21
 2dc:	69 23       	and	r22, r25
 2de:	65 bb       	out	0x15, r22	; 21
 2e0:	36 c0       	rjmp	.+108    	; 0x34e <DIO_enuInit+0x1dc>
 2e2:	48 2f       	mov	r20, r24
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	fa 01       	movw	r30, r20
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e0 5a       	subi	r30, 0xA0	; 160
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	90 81       	ld	r25, Z
 2f2:	91 30       	cpi	r25, 0x01	; 1
 2f4:	69 f4       	brne	.+26     	; 0x310 <DIO_enuInit+0x19e>
 2f6:	91 b3       	in	r25, 0x11	; 17
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	ba 01       	movw	r22, r20
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_enuInit+0x192>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_enuInit+0x18e>
 308:	9b 01       	movw	r18, r22
 30a:	29 2b       	or	r18, r25
 30c:	21 bb       	out	0x11, r18	; 17
 30e:	1f c0       	rjmp	.+62     	; 0x34e <DIO_enuInit+0x1dc>
 310:	91 11       	cpse	r25, r1
 312:	1d c0       	rjmp	.+58     	; 0x34e <DIO_enuInit+0x1dc>
 314:	91 b3       	in	r25, 0x11	; 17
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	fb 01       	movw	r30, r22
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_enuInit+0x1b0>
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	2a 95       	dec	r18
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_enuInit+0x1ac>
 326:	9f 01       	movw	r18, r30
 328:	6e 2f       	mov	r22, r30
 32a:	60 95       	com	r22
 32c:	96 23       	and	r25, r22
 32e:	91 bb       	out	0x11, r25	; 17
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	fa 01       	movw	r30, r20
 336:	e0 5a       	subi	r30, 0xA0	; 160
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	91 81       	ldd	r25, Z+1	; 0x01
 33c:	91 11       	cpse	r25, r1
 33e:	04 c0       	rjmp	.+8      	; 0x348 <DIO_enuInit+0x1d6>
 340:	92 b3       	in	r25, 0x12	; 18
 342:	29 2b       	or	r18, r25
 344:	22 bb       	out	0x12, r18	; 18
 346:	03 c0       	rjmp	.+6      	; 0x34e <DIO_enuInit+0x1dc>
 348:	92 b3       	in	r25, 0x12	; 18
 34a:	69 23       	and	r22, r25
 34c:	62 bb       	out	0x12, r22	; 18
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 32       	cpi	r24, 0x20	; 32
 352:	08 f4       	brcc	.+2      	; 0x356 <DIO_enuInit+0x1e4>
 354:	10 cf       	rjmp	.-480    	; 0x176 <DIO_enuInit+0x4>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret

0000035a <DIO_enuSetPort>:
DIO_tenuErrorStatus DIO_enuSetPort(u8 Cpy_u8PortNumber,u8 Cpy_u8PortValue)
{
	DIO_tenuErrorStatus Loc_enuErrorStatus = DIO_enOK;
	switch(Cpy_u8PortNumber){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	41 f0       	breq	.+16     	; 0x36e <DIO_enuSetPort+0x14>
 35e:	28 f0       	brcs	.+10     	; 0x36a <DIO_enuSetPort+0x10>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	39 f0       	breq	.+14     	; 0x372 <DIO_enuSetPort+0x18>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	39 f0       	breq	.+14     	; 0x376 <DIO_enuSetPort+0x1c>
 368:	07 c0       	rjmp	.+14     	; 0x378 <DIO_enuSetPort+0x1e>
	case(DIO_PORTA):
		ASSIGN_REG(PORTA,Cpy_u8PortValue);
 36a:	6b bb       	out	0x1b, r22	; 27
		break;
 36c:	05 c0       	rjmp	.+10     	; 0x378 <DIO_enuSetPort+0x1e>
	case(DIO_PORTB):
		ASSIGN_REG(PORTB,Cpy_u8PortValue);
 36e:	68 bb       	out	0x18, r22	; 24
		break;
 370:	03 c0       	rjmp	.+6      	; 0x378 <DIO_enuSetPort+0x1e>
	case(DIO_PORTC):
		ASSIGN_REG(PORTC,Cpy_u8PortValue);
 372:	65 bb       	out	0x15, r22	; 21
		break;
 374:	01 c0       	rjmp	.+2      	; 0x378 <DIO_enuSetPort+0x1e>
	case(DIO_PORTD):
		ASSIGN_REG(PORTD,Cpy_u8PortValue);
 376:	62 bb       	out	0x12, r22	; 18
		break;
	}
	return Loc_enuErrorStatus;
}
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret

0000037c <main>:
#include "ADC_int.h"
#include "ADC_Prv.h"


int main(void)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	00 d0       	rcall	.+0      	; 0x382 <main+0x6>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	ADC_voidInit();
 386:	0e 94 af 00 	call	0x15e	; 0x15e <ADC_voidInit>
	DIO_enuInit();
 38a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_enuInit>
	ADC_voidConfigureInputChannel(ADC_InputChannel_1);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_voidConfigureInputChannel>
	u16 ADC_value=0,Analog,degree;
 394:	1a 82       	std	Y+2, r1	; 0x02
 396:	19 82       	std	Y+1, r1	; 0x01
    while (1) 
    {
		//DIO_enuInit();
		
		ADC_enuStartConversionAndWait(ADC_Resolution_8bit,&ADC_value);	
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 5d 00 	call	0xba	; 0xba <ADC_enuStartConversionAndWait>
		//Analog = (u16)((u32)ADC_value * 5000  /1024);
		//degree = Analog/10;
		
			DIO_enuSetPort(2,ADC_value);
 3a4:	69 81       	ldd	r22, Y+1	; 0x01
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_enuSetPort>
 3ac:	f5 cf       	rjmp	.-22     	; 0x398 <main+0x1c>

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
